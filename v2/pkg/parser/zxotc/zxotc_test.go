package zxotc

import (
	"context"
	"encoding/json"
	"fmt"
	storageTypes "github.com/KyberNetwork/tradelogs/v2/pkg/storage/types"
	"github.com/KyberNetwork/tradelogs/v2/pkg/storage/zxotc"
	"math/big"
	"strings"
	"testing"
	"time"

	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/stretchr/testify/require"

	tradingTypes "github.com/KyberNetwork/tradelogs/v2/pkg/types"
)

const rpcURL = ""

func Test(t *testing.T) {
	var res, tmp []storageTypes.TradeLog
	tmp = nil
	res = append(res, tmp...)
	fmt.Println(len(res))
}

func TestFetchEvent(t *testing.T) {
	t.Skip()
	p := MustNewParser()
	require.Equal(t, p.abi.Events[OtcOrderFilledEvent].ID, common.HexToHash("0xac75f773e3a92f1a02b12134d65e1f47f8a14eabe4eaf1e24624918e6a8b269f"))
	client, err := ethclient.Dial(rpcURL)
	require.NoError(t, err)
	logs, err := client.FilterLogs(context.Background(), ethereum.FilterQuery{
		BlockHash: nil,
		FromBlock: big.NewInt(16282125),
		ToBlock:   big.NewInt(16282255),
		Addresses: nil,
		Topics: [][]common.Hash{
			{
				common.HexToHash("0xac75f773e3a92f1a02b12134d65e1f47f8a14eabe4eaf1e24624918e6a8b269f"),
			},
		},
	})
	require.NoError(t, err)
	d, _ := json.Marshal(logs)
	t.Log(string(d))
}

func TestParseEvent(t *testing.T) {
	eventRaw := `{
        "address": "0xdef1c0ded9bec7f1a1670819833240f027b25eff",
        "topics": [
            "0xac75f773e3a92f1a02b12134d65e1f47f8a14eabe4eaf1e24624918e6a8b269f"
        ],
        "data": "0xb1db529b00f4a98a4c0dbf8fc7c888be9cd20da5b95136c0887aef7a6a96637d000000000000000000000000af0b0000f0210d0f421f0009c72406703b50506b00000000000000000000000074de5d4fcbf63e00296fd95d33236b9794016631000000000000000000000000c944e90c64b2c07662a292be6244bdf05cda44a7000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4800000000000000000000000000000000000000000000124272b1b960ca00000000000000000000000000000000000000000000000000000000000001276a5f90",
        "blockNumber": "0xf87219",
        "transactionHash": "0x4153c12bbef7fcae36bed6a1b27b42f72b15302afea70e2c5aa52022f92a7eca",
        "transactionIndex": "0x15",
        "blockHash": "0x15db0c1f7d0fcf132f6598e4420bf45de265f4b9d8b168383a049f62bdcd0485",
        "logIndex": "0x3b",
        "removed": false
    }`
	event := types.Log{}
	err := json.Unmarshal([]byte(eventRaw), &event)
	require.NoError(t, err)
	p := MustNewParser()
	log, err := p.Parse(event, uint64(time.Now().Unix()))
	require.NoError(t, err)
	require.Equal(t, log[0].(*zxotc.TradeLog).EventHash, p.eventHash)
	jsonLog, err := json.Marshal(log)
	t.Log(string(jsonLog))
}

func TestParseTxEvent(t *testing.T) {
	t.Skip()
	txHash := common.HexToHash("0xd436854ddf0ecb3c087f0de1a73b62a61aae1c144eee989efa467f259d6f372b")
	ethClient, err := ethclient.Dial(rpcURL)
	if err != nil {
		panic(err)
	}
	p := MustNewParser()

	tx, err := ethClient.TransactionReceipt(context.Background(), txHash)
	require.NoError(t, err)
	for _, log := range tx.Logs {
		if log.Topics[0].Hex() == p.eventHash {
			tradeLog, err := p.Parse(*log, tx.BlockNumber.Uint64())
			require.NoError(t, err)
			jsonLog, err := json.Marshal(tradeLog)
			t.Log(string(jsonLog))
		}
	}
}

func TestGetExpiry(t *testing.T) {
	rawData := `{"from":"0xDef1C0ded9bec7F1a1670819833240f027b25EfF","gas":"0x26ceb","gasUsed":"0xf2bb","to":"0x5Ebac8dbfbBA22168471b0f914131d1976536A25","input":"0xdac748d4000000000000000000000000582d872a1b094fc48f5de31d3b73f2d9be47def1000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000108da85380000000000000000000000000000000000000000000000000024cb4ebf13faad000000000000000000000000ff8ba4d1fc3762f6154cc942ccf30049a2a0cec60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c3a1d4f0e24a9856f2db849763cfdced559a79b100000000667ce1240000000000000000000000000000000000000000667ce0ca0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000001ca6a9a48c02d22865454521219d18c3cef06eade7ef6c4321f3735843d64d7f48749b9f767d10cba977373f8575e45d9fec2447254eb4aa9a300a27c45dd5df280000000000000000000000000000000000000000000000000024cb4ebf13faad","output":"0x0000000000000000000000000000000000000000000000000024cb4ebf13faad0000000000000000000000000000000000000000000000000000000108da8538","calls":[{"from":"0xDef1C0ded9bec7F1a1670819833240f027b25EfF","gas":"0x24b6e","gasUsed":"0xbb8","to":"0x0000000000000000000000000000000000000001","input":"0x97e381fa4992e53e819c618707a3ccabf41aab420d655043a3c56adfba7c9d48000000000000000000000000000000000000000000000000000000000000001ca6a9a48c02d22865454521219d18c3cef06eade7ef6c4321f3735843d64d7f48749b9f767d10cba977373f8575e45d9fec2447254eb4aa9a300a27c45dd5df28","output":"0x000000000000000000000000ff8ba4d1fc3762f6154cc942ccf30049a2a0cec6","calls":null,"value":"\u003cnil\u003e","type":"STOP","logs":null},{"from":"0xDef1C0ded9bec7F1a1670819833240f027b25EfF","gas":"0x23094","gasUsed":"0x2021","to":"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2","input":"0x23b872dd00000000000000000000000022f9dcf4647084d6c31b2765f6910cd85c178c18000000000000000000000000ff8ba4d1fc3762f6154cc942ccf30049a2a0cec60000000000000000000000000000000000000000000000000024cb4ebf13faad","output":"0x0000000000000000000000000000000000000000000000000000000000000001","calls":null,"value":"0","type":"STOP","logs":[{"address":"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x00000000000000000000000022f9dcf4647084d6c31b2765f6910cd85c178c18","0x000000000000000000000000ff8ba4d1fc3762f6154cc942ccf30049a2a0cec6"],"data":"0x0000000000000000000000000000000000000000000000000024cb4ebf13faad"}]},{"from":"0xDef1C0ded9bec7F1a1670819833240f027b25EfF","gas":"0x20f88","gasUsed":"0x91bb","to":"0x582d872A1B094FC48F5DE31D3B73F2D9bE47def1","input":"0x23b872dd000000000000000000000000ff8ba4d1fc3762f6154cc942ccf30049a2a0cec600000000000000000000000022f9dcf4647084d6c31b2765f6910cd85c178c180000000000000000000000000000000000000000000000000000000108da8538","output":"0x0000000000000000000000000000000000000000000000000000000000000001","calls":null,"value":"0","type":"STOP","logs":[{"address":"0x582d872a1b094fc48f5de31d3b73f2d9be47def1","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x000000000000000000000000ff8ba4d1fc3762f6154cc942ccf30049a2a0cec6","0x00000000000000000000000022f9dcf4647084d6c31b2765f6910cd85c178c18"],"data":"0x0000000000000000000000000000000000000000000000000000000108da8538"},{"address":"0x582d872a1b094fc48f5de31d3b73f2d9be47def1","topics":["0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","0x000000000000000000000000ff8ba4d1fc3762f6154cc942ccf30049a2a0cec6","0x000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff"],"data":"0xfffffffffffffffffffffffffffffffffffffffffffffffffffe50f44bb63acc"}]}],"value":"0","type":"STOP","logs":[{"address":"0xdef1c0ded9bec7f1a1670819833240f027b25eff","topics":["0xac75f773e3a92f1a02b12134d65e1f47f8a14eabe4eaf1e24624918e6a8b269f"],"data":"0xe25553e667f4d3053b4ef37683048b05c29e966879880976357a4dd8a03eedb2000000000000000000000000ff8ba4d1fc3762f6154cc942ccf30049a2a0cec600000000000000000000000022f9dcf4647084d6c31b2765f6910cd85c178c18000000000000000000000000582d872a1b094fc48f5de31d3b73f2d9be47def1000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000108da85380000000000000000000000000000000000000000000000000024cb4ebf13faad"}]}`
	var callFrame tradingTypes.CallFrame
	p := MustNewParser()
	err := json.Unmarshal([]byte(rawData), &callFrame)
	require.NoError(t, err)
	rfqOrderParam, err := p.getRFQOrderParams(callFrame)
	require.NoError(t, err)
	require.NotNil(t, rfqOrderParam)
	require.Equal(t, uint64(1719460132), rfqOrderParam.GetExpiry())
}

func TestParseWithCallFrame(t *testing.T) {
	t.Skip("Need to add the rpc url that enables the trace call JSON-RPC")
	expectedTradeLog := &zxotc.TradeLog{
		CommonTradeLog: &storageTypes.CommonTradeLog{
			OrderHash:        "0xceefc26698e9c77d3bff738449a28f2a29c72ffc93392c4d8a156b56f8d03a22",
			Maker:            "0xff8Ba4D1fC3762f6154cc942CCF30049A2A0cEC6",
			Taker:            "0x22F9dCF4647084d6C31b2765F6910cd85C178C18",
			MakerToken:       "0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48",
			TakerToken:       "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
			MakerTokenAmount: "28332999",
			TakerTokenAmount: "8453527433100000",
			ContractAddress:  "0xDef1C0ded9bec7F1a1670819833240f027b25EfF",
			BlockNumber:      20181990,
			TxHash:           "0x2ae57498f98fec3d5d053ade3d9dfdd6d5ec6c66e9c0a18fad836b1c9a2dfb3a",
			LogIndex:         342,
			Timestamp:        0,
			EventHash:        "0xac75f773e3a92f1a02b12134d65e1f47f8a14eabe4eaf1e24624918e6a8b269f",
			Expiry:           1719460132,
		}}
	p := MustNewParser()
	client, err := ethclient.Dial(rpcURL)
	require.NoError(t, err)

	receipt, err := client.TransactionReceipt(context.Background(), common.HexToHash("0x2ae57498f98fec3d5d053ade3d9dfdd6d5ec6c66e9c0a18fad836b1c9a2dfb3a"))
	require.NoError(t, err)

	rawData := `{"from":"0xDef1C0ded9bec7F1a1670819833240f027b25EfF","gas":"0x26ceb","gasUsed":"0xf2bb","to":"0x5Ebac8dbfbBA22168471b0f914131d1976536A25","input":"0xdac748d4000000000000000000000000582d872a1b094fc48f5de31d3b73f2d9be47def1000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000108da85380000000000000000000000000000000000000000000000000024cb4ebf13faad000000000000000000000000ff8ba4d1fc3762f6154cc942ccf30049a2a0cec60000000000000000000000000000000000000000000000000000000000000000000000000000000000000000c3a1d4f0e24a9856f2db849763cfdced559a79b100000000667ce1240000000000000000000000000000000000000000667ce0ca0000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000001ca6a9a48c02d22865454521219d18c3cef06eade7ef6c4321f3735843d64d7f48749b9f767d10cba977373f8575e45d9fec2447254eb4aa9a300a27c45dd5df280000000000000000000000000000000000000000000000000024cb4ebf13faad","output":"0x0000000000000000000000000000000000000000000000000024cb4ebf13faad0000000000000000000000000000000000000000000000000000000108da8538","calls":[{"from":"0xDef1C0ded9bec7F1a1670819833240f027b25EfF","gas":"0x24b6e","gasUsed":"0xbb8","to":"0x0000000000000000000000000000000000000001","input":"0x97e381fa4992e53e819c618707a3ccabf41aab420d655043a3c56adfba7c9d48000000000000000000000000000000000000000000000000000000000000001ca6a9a48c02d22865454521219d18c3cef06eade7ef6c4321f3735843d64d7f48749b9f767d10cba977373f8575e45d9fec2447254eb4aa9a300a27c45dd5df28","output":"0x000000000000000000000000ff8ba4d1fc3762f6154cc942ccf30049a2a0cec6","calls":null,"value":"\u003cnil\u003e","type":"STOP","logs":null},{"from":"0xDef1C0ded9bec7F1a1670819833240f027b25EfF","gas":"0x23094","gasUsed":"0x2021","to":"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2","input":"0x23b872dd00000000000000000000000022f9dcf4647084d6c31b2765f6910cd85c178c18000000000000000000000000ff8ba4d1fc3762f6154cc942ccf30049a2a0cec60000000000000000000000000000000000000000000000000024cb4ebf13faad","output":"0x0000000000000000000000000000000000000000000000000000000000000001","calls":null,"value":"0","type":"STOP","logs":[{"address":"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x00000000000000000000000022f9dcf4647084d6c31b2765f6910cd85c178c18","0x000000000000000000000000ff8ba4d1fc3762f6154cc942ccf30049a2a0cec6"],"data":"0x0000000000000000000000000000000000000000000000000024cb4ebf13faad"}]},{"from":"0xDef1C0ded9bec7F1a1670819833240f027b25EfF","gas":"0x20f88","gasUsed":"0x91bb","to":"0x582d872A1B094FC48F5DE31D3B73F2D9bE47def1","input":"0x23b872dd000000000000000000000000ff8ba4d1fc3762f6154cc942ccf30049a2a0cec600000000000000000000000022f9dcf4647084d6c31b2765f6910cd85c178c180000000000000000000000000000000000000000000000000000000108da8538","output":"0x0000000000000000000000000000000000000000000000000000000000000001","calls":null,"value":"0","type":"STOP","logs":[{"address":"0x582d872a1b094fc48f5de31d3b73f2d9be47def1","topics":["0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","0x000000000000000000000000ff8ba4d1fc3762f6154cc942ccf30049a2a0cec6","0x00000000000000000000000022f9dcf4647084d6c31b2765f6910cd85c178c18"],"data":"0x0000000000000000000000000000000000000000000000000000000108da8538"},{"address":"0x582d872a1b094fc48f5de31d3b73f2d9be47def1","topics":["0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","0x000000000000000000000000ff8ba4d1fc3762f6154cc942ccf30049a2a0cec6","0x000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff"],"data":"0xfffffffffffffffffffffffffffffffffffffffffffffffffffe50f44bb63acc"}]}],"value":"0","type":"STOP","logs":[{"address":"0xdef1c0ded9bec7f1a1670819833240f027b25eff","topics":["0xac75f773e3a92f1a02b12134d65e1f47f8a14eabe4eaf1e24624918e6a8b269f"],"data":"0xe25553e667f4d3053b4ef37683048b05c29e966879880976357a4dd8a03eedb2000000000000000000000000ff8ba4d1fc3762f6154cc942ccf30049a2a0cec600000000000000000000000022f9dcf4647084d6c31b2765f6910cd85c178c18000000000000000000000000582d872a1b094fc48f5de31d3b73f2d9be47def1000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc20000000000000000000000000000000000000000000000000000000108da85380000000000000000000000000000000000000000000000000024cb4ebf13faad"}]}`
	var callFrame tradingTypes.CallFrame

	err = json.Unmarshal([]byte(rawData), &callFrame)
	require.NoError(t, err)

	for _, eventLog := range receipt.Logs {
		if len(eventLog.Topics) == 0 {
			continue
		}
		firstTopic := eventLog.Topics[0]

		if !strings.EqualFold(firstTopic.String(), p.eventHash) {
			continue
		}

		parse, err := p.ParseWithCallFrame(callFrame, *eventLog, 0)
		require.NoError(t, err)
		t.Log(parse)
		require.Equal(t, expectedTradeLog, parse[0])
	}
}

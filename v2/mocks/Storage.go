// Code generated by mockery v2.45.0. DO NOT EDIT.

package mocks

import (
	types "github.com/KyberNetwork/tradelogs/v2/pkg/storage/tradelogs/types"
	mock "github.com/stretchr/testify/mock"
)

// MockStorage is an autogenerated mock type for the Storage type
type MockStorage struct {
	mock.Mock
}

// Delete provides a mock function with given fields: blocks
func (_m *MockStorage) Delete(blocks []uint64) error {
	ret := _m.Called(blocks)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]uint64) error); ok {
		r0 = rf(blocks)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: query
func (_m *MockStorage) Get(query types.TradeLogsQuery) ([]types.TradeLog, error) {
	ret := _m.Called(query)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 []types.TradeLog
	var r1 error
	if rf, ok := ret.Get(0).(func(types.TradeLogsQuery) ([]types.TradeLog, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(types.TradeLogsQuery) []types.TradeLog); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.TradeLog)
		}
	}

	if rf, ok := ret.Get(1).(func(types.TradeLogsQuery) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: orders
func (_m *MockStorage) Insert(orders []types.TradeLog) error {
	ret := _m.Called(orders)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]types.TradeLog) error); ok {
		r0 = rf(orders)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Type provides a mock function with given fields:
func (_m *MockStorage) Exchange() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Exchange")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewMockStorage creates a new instance of MockStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStorage {
	mock := &MockStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.46.2. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	pkgtypes "github.com/KyberNetwork/tradelogs/v2/pkg/types"

	tradelogstypes "github.com/KyberNetwork/tradelogs/v2/pkg/storage/tradelogs/types"

	types "github.com/ethereum/go-ethereum/core/types"
)

// MockParser is an autogenerated mock type for the Parser type
type MockParser struct {
	mock.Mock
}

// Address provides a mock function with given fields:
func (_m *MockParser) Address() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Address")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Exchange provides a mock function with given fields:
func (_m *MockParser) Exchange() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Exchange")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// LogFromExchange provides a mock function with given fields: log
func (_m *MockParser) LogFromExchange(log types.Log) bool {
	ret := _m.Called(log)

	if len(ret) == 0 {
		panic("no return value specified for LogFromExchange")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(types.Log) bool); ok {
		r0 = rf(log)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Parse provides a mock function with given fields: log, blockTime
func (_m *MockParser) Parse(log types.Log, blockTime uint64) ([]tradelogstypes.TradeLog, error) {
	ret := _m.Called(log, blockTime)

	if len(ret) == 0 {
		panic("no return value specified for Parse")
	}

	var r0 []tradelogstypes.TradeLog
	var r1 error
	if rf, ok := ret.Get(0).(func(types.Log, uint64) ([]tradelogstypes.TradeLog, error)); ok {
		return rf(log, blockTime)
	}
	if rf, ok := ret.Get(0).(func(types.Log, uint64) []tradelogstypes.TradeLog); ok {
		r0 = rf(log, blockTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tradelogstypes.TradeLog)
		}
	}

	if rf, ok := ret.Get(1).(func(types.Log, uint64) error); ok {
		r1 = rf(log, blockTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ParseWithCallFrame provides a mock function with given fields: callFrame, log, blockTime
func (_m *MockParser) ParseWithCallFrame(callFrame pkgtypes.CallFrame, log types.Log, blockTime uint64) ([]tradelogstypes.TradeLog, error) {
	ret := _m.Called(callFrame, log, blockTime)

	if len(ret) == 0 {
		panic("no return value specified for ParseWithCallFrame")
	}

	var r0 []tradelogstypes.TradeLog
	var r1 error
	if rf, ok := ret.Get(0).(func(pkgtypes.CallFrame, types.Log, uint64) ([]tradelogstypes.TradeLog, error)); ok {
		return rf(callFrame, log, blockTime)
	}
	if rf, ok := ret.Get(0).(func(pkgtypes.CallFrame, types.Log, uint64) []tradelogstypes.TradeLog); ok {
		r0 = rf(callFrame, log, blockTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]tradelogstypes.TradeLog)
		}
	}

	if rf, ok := ret.Get(1).(func(pkgtypes.CallFrame, types.Log, uint64) error); ok {
		r1 = rf(callFrame, log, blockTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Topics provides a mock function with given fields:
func (_m *MockParser) Topics() []string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Topics")
	}

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// UseTraceCall provides a mock function with given fields:
func (_m *MockParser) UseTraceCall() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for UseTraceCall")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// NewMockParser creates a new instance of MockParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockParser {
	mock := &MockParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

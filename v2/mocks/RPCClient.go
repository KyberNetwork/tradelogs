// Code generated by mockery v2.53.3. DO NOT EDIT.

package mocks

import (
	context "context"

	pkgtypes "github.com/KyberNetwork/tradelogs/v2/pkg/types"
	mock "github.com/stretchr/testify/mock"

	types "github.com/ethereum/go-ethereum/core/types"
)

// MockRPCClient is an autogenerated mock type for the IClient type
type MockRPCClient struct {
	mock.Mock
}

// BlockByNumber provides a mock function with given fields: ctx, blockNumber
func (_m *MockRPCClient) BlockByNumber(ctx context.Context, blockNumber uint64) (*types.Block, error) {
	ret := _m.Called(ctx, blockNumber)

	if len(ret) == 0 {
		panic("no return value specified for BlockByNumber")
	}

	var r0 *types.Block
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*types.Block, error)); ok {
		return rf(ctx, blockNumber)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *types.Block); ok {
		r0 = rf(ctx, blockNumber)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Block)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, blockNumber)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlockByTxHash provides a mock function with given fields: ctx, txHash
func (_m *MockRPCClient) BlockByTxHash(ctx context.Context, txHash string) (uint64, error) {
	ret := _m.Called(ctx, txHash)

	if len(ret) == 0 {
		panic("no return value specified for BlockByTxHash")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (uint64, error)); ok {
		return rf(ctx, txHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) uint64); ok {
		r0 = rf(ctx, txHash)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, txHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchLogs provides a mock function with given fields: ctx, from, to, address, topics
func (_m *MockRPCClient) FetchLogs(ctx context.Context, from uint64, to uint64, address string, topics []string) ([]types.Log, error) {
	ret := _m.Called(ctx, from, to, address, topics)

	if len(ret) == 0 {
		panic("no return value specified for FetchLogs")
	}

	var r0 []types.Log
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64, string, []string) ([]types.Log, error)); ok {
		return rf(ctx, from, to, address, topics)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, uint64, string, []string) []types.Log); ok {
		r0 = rf(ctx, from, to, address, topics)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Log)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, uint64, string, []string) error); ok {
		r1 = rf(ctx, from, to, address, topics)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchLogsByBlockHash provides a mock function with given fields: ctx, blockHash
func (_m *MockRPCClient) FetchLogsByBlockHash(ctx context.Context, blockHash string) ([]types.Log, error) {
	ret := _m.Called(ctx, blockHash)

	if len(ret) == 0 {
		panic("no return value specified for FetchLogsByBlockHash")
	}

	var r0 []types.Log
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]types.Log, error)); ok {
		return rf(ctx, blockHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []types.Log); ok {
		r0 = rf(ctx, blockHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Log)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, blockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FetchTraceCalls provides a mock function with given fields: ctx, blockHash
func (_m *MockRPCClient) FetchTraceCalls(ctx context.Context, blockHash string) ([]pkgtypes.TransactionCallFrame, error) {
	ret := _m.Called(ctx, blockHash)

	if len(ret) == 0 {
		panic("no return value specified for FetchTraceCalls")
	}

	var r0 []pkgtypes.TransactionCallFrame
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]pkgtypes.TransactionCallFrame, error)); ok {
		return rf(ctx, blockHash)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []pkgtypes.TransactionCallFrame); ok {
		r0 = rf(ctx, blockHash)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]pkgtypes.TransactionCallFrame)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, blockHash)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBlockNumber provides a mock function with given fields: ctx
func (_m *MockRPCClient) GetBlockNumber(ctx context.Context) (uint64, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetBlockNumber")
	}

	var r0 uint64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (uint64, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) uint64); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint64)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockRPCClient creates a new instance of MockRPCClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRPCClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRPCClient {
	mock := &MockRPCClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

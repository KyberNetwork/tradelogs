package oneinchv6

import (
	"context"
	"encoding/hex"
	"encoding/json"
	"math/big"
	"strings"
	"testing"
	"time"

	"github.com/KyberNetwork/tradelogs/pkg/rpcnode"
	"github.com/KyberNetwork/tradelogs/pkg/tracecall"
	"github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/ethclient"
	"github.com/stretchr/testify/require"
	"go.uber.org/zap"
)

const rpcURL = ""

func TestFetchEvent(t *testing.T) {
	t.Skip("Need to add the rpc url that enables the trace call JSON-RPC")
	ethClient, err := ethclient.Dial(rpcURL)
	if err != nil {
		panic(err)
	}
	traceCalls := tracecall.NewCache(rpcnode.NewClient(zap.S(), ethClient))
	p := MustNewParser(traceCalls)
	require.Equal(t, p.abi.Events[FilledEvent].ID, common.HexToHash("0xfec331350fce78ba658e082a71da20ac9f8d798a99b3c79681c8440cbfe77e07"))
	client, err := ethclient.Dial(rpcURL)
	require.NoError(t, err)
	logs, err := client.FilterLogs(context.Background(), ethereum.FilterQuery{
		BlockHash: nil,
		FromBlock: big.NewInt(20890481),
		ToBlock:   big.NewInt(20890481),
		Addresses: nil,
		Topics: [][]common.Hash{
			{
				p.abi.Events[FilledEvent].ID,
			},
		},
	})
	require.NoError(t, err)
	d, err := json.Marshal(logs)
	require.NoError(t, err)
	t.Log(string(d))
}

func TestParseEvent(t *testing.T) {
	t.Skip("Need to add the rpc url that enables the trace call JSON-RPC")
	eventRaw := `[{"address":"0x111111125421ca6dc452d289314280a0f8842a65","topics":["0xfec331350fce78ba658e082a71da20ac9f8d798a99b3c79681c8440cbfe77e07"],"data":"0xb81725973077ecc6db7dd73510be46152917f31ab7d02210aace851edc0f3fbb000000000000000000000000000000000000000000000000a5953ec9be11bd73","blockNumber":"0x13ec371","transactionHash":"0x09b63a10295261192885b38af317ba138ad7fe5828ce25524e7f0f053e250458","transactionIndex":"0x7","blockHash":"0x291e59d96ccc8b661842cfd9c4dcce1d11ed30cd4cf2b8034bff2a8d7a595785","logIndex":"0x3e","removed":false}]`
	events := []types.Log{}
	err := json.Unmarshal([]byte(eventRaw), &events)
	require.NoError(t, err)
	ethClient, err := ethclient.Dial(rpcURL)
	if err != nil {
		panic(err)
	}
	traceCalls := tracecall.NewCache(rpcnode.NewClient(zap.S(), ethClient))
	p := MustNewParser(traceCalls)
	for _, event := range events {
		log, err := p.Parse(event, uint64(time.Now().Unix()))
		require.NoError(t, err)
		require.Equal(t, log.EventHash, p.eventHash)
		t.Log(log.Maker)
		t.Log(log.MakerToken)
		t.Log(log.MakerTokenAmount)
		t.Log(log.Taker)
		t.Log(log.TakerToken)
		t.Log(log.TakerTokenAmount)
	}
}

func TestDecodeMakerAssetSuffix(t *testing.T) {
	testcases := []struct {
		name          string // tx_hash
		takerTraits   string
		args          string
		expectedToken string
	}{
		{
			name:          "0x4cf66a97cb868795999cf308ab49256b3e64f098698923dd00ecd39724960569",
			takerTraits:   "18092523433231882371958174130396796232983432224281174865446760849707234230272",
			args:          "111111125421ca6dc452d289314280a0f8842a650000014000000140000001400000014000000140000001400000014000000140000000000000000000000000a0b86991c6218b36c1d19d4a2e9eb0ce3606eb480000000000000000000000000000000000000000000000000000000001b76d81000000000000000000000000000000000000000000000000000000001308a5d9000000000000000000000000000000000000000000000000000000006710c6a6f4000a0f107a31c0a9a7a364baa04df5af91df0148e36494035431f0b0f5fcac00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000041c31117e0b33506fe565e81971b640e7e25681356a4be4fe767032c285bfe5d830bcbea9a206c0bd0c4c28657812e3e151b3646db73a10ebbf61e7cbb80da1b6d1b00000000000000000000000000000000000000000000000000000000000000",
			expectedToken: "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
		},
		{
			name:          "0xcf0e8b8d7bdd2228d11d06d706e5d1590d0eb1b847cb08bb147279443fdd113b",
			takerTraits:   "43422042953894800120864327101047276075886241369890048249078107351438231339008",
			args:          "0000014000000140000001400000014000000140000001400000014000000140000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000005bf74cbe2467c00000000000000000000000000000000000000000000000000000000001308a5db000000000000000000000000000000000000000000000000000000006710c6f1323b6dbdf2fda4934a7f1a0b6c04f1cb59658353c537571dc33634644e6eddca00000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000041fb57887615ac679372de0387fbe3851057b8dfcb5ffad0f319d1c4317c4b09ec3797f77ac06e0cebca0965f3ad104c7534b0ba0ed43b4d1c2e3d0e36ffded15b1c00000000000000000000000000000000000000000000000000000000000000",
			expectedToken: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
		},
		{
			name:          "0x036a23820f8cf7878bae223b8531206244448e98f9d99b40ebdadb9965aceeaa",
			takerTraits:   "18092523433231882371958174130396796232983432224281174865446760849707234230272",
			args:          "111111125421ca6dc452d289314280a0f8842a650000014000000140000001400000014000000140000001400000014000000140000000000000000000000000dac17f958d2ee523a2206206994597c13d831ec7000000000000000000000000000000000000000000000000000000169a9b78de000000000000000000000000000000000000000000000000000000001308a5cc000000000000000000000000000000000000000000000000000000006710c385f67f22f4d926081dbb376db1b25c4d8602297e1bdd43c94536547e83e5c9405800000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000041b9effaad6be5cb9d18e4777b9abd08d3de5dd5a7f157462984f8b14e3d25933e3d9a1a41a18b6fe82ef256d70ed8fc9155a9201a12e66198f9a4942d0040fc751c00000000000000000000000000000000000000000000000000000000000000",
			expectedToken: "0xdac17f958d2ee523a2206206994597c13d831ec7",
		},
		{
			name:          "0x94ff859324334b7bab4b7674f9d12f26b2e0d29759b8d5992fc4c23d7855e412",
			takerTraits:   "14474020644565751264971580848875299112568745203479907239213711349459948929024",
			args:          "0000014000000140000001400000014000000140000001400000014000000140000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2000000000000000000000000000000000000000000000000010be2004c29abd0000000000000000000000000000000000000000000000000000000001308a5bd000000000000000000000000000000000000000000000000000000006710bfe863f5bfe22eb8c8c0524d14554798843e12d0ef5d4734b6aec98bedca85b49b3e0000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000004164c0db9c346457aeaa6d6e8b635ae2a5b844b63d9a28232ca06697ca74db689272d03f00c07b260077eaeb8af9ade13e7fe051808fd1e03b6f9107e15f6066591c00000000000000000000000000000000000000000000000000000000000000",
			expectedToken: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
		},
		{
			name:          "0xe60e1b81a2ee387092d51b279c4d6fcebe4ab864027b98399b0439c62da22143",
			takerTraits:   "43422042953894800120864327101047276075886241369890048249078107351438231339008",
			args:          "0000014000000140000001400000014000000140000001400000014000000140000000000000000000000000c02aaa39b223fe8d0a0e5c4f27ead9083c756cc200000000000000000000000000000000000000000000000001f6eced54faed40000000000000000000000000000000000000000000000000000000001308a565000000000000000000000000000000000000000000000000000000006710bd1769b8870c074a51878175bcc84a20ecee4ae13c5dc814df79bb930af2fde7c129000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000417c25f11f48119efec8508416371922fd3c94cda83ea4b79b1c1989678025ed783f0eeeb278f1a09631f5847d2ab51c08741568f8ed917f12c8e1f8ec83970f111b00000000000000000000000000000000000000000000000000000000000000",
			expectedToken: "0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2",
		},
	}

	for _, tc := range testcases {
		t.Run(tc.name, func(t *testing.T) {
			takerTraits, _ := new(big.Int).SetString(tc.takerTraits, 10)
			args, _ := hex.DecodeString(tc.args)

			token, err := decodeMakerAssetSuffix(takerTraits, args)
			require.NoError(t, err)
			require.Equal(t, tc.expectedToken, strings.ToLower(token.Hex()))
		})
	}

}
